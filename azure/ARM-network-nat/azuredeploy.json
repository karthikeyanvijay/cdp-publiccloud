{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "apiProfile":"2019-03-01-hybrid",
  "parameters": {
    "namePrefix": {
      "type": "string",
      "defaultValue": "cdp",
      "metadata": {
        "description": "Prefix for all resource names"
      }
    },
    "AllowIPAddress": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "IP CIDR to allow connections to public subnet"
      }
    },
    "deployVMinPrivateSubnet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Create a server in the private subnet"
      }
    },
    "deployBastionVM": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Create a bastion host in public subnet"
      }
    },
    "setupPeeredNetwork": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
            "description": "Create a second network & peer it to the first network"
        }
    },
    "setupPeeredNetworkVMs": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
            "description": "Setup 4 VMs in the peered network"
        }
    },
    "vmCountinPeeredNetwork": {
        "type": "int",
        "defaultValue": 0,
        "metadata": {
            "description": "Number of VMs in the peered network"
        }
    },
    "resourceTags": {
        "type": "object",
        "defaultValue": {
            "Owner": "Vijay Anand Karthikeyan",
            "Project": "CDP"
        }
    },
    "vmAdminPassword": {
      "type": "string",
      "defaultValue": "DefaultPassW0rd$",
      "metadata": {
        "description": "Admin password for VMs"
      }
    },
    "vmImageReference": {
      "type": "Object",
      "defaultValue": { 
        "publisher": "RedHat", 
        "offer": "RHEL", 
        "sku": "7.8", 
        "version": "latest" 
      },
      "metadata": {
        "description": "Image to be used when building the VMs"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.0.0/16",
      "metadata": {
        "description": "Address prefix"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "10.10.11.0/24",
      "metadata": {
        "description": "Subnet 1 Prefix"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "10.10.12.0/24",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet3Prefix": {
      "type": "string",
      "defaultValue": "10.10.13.0/24",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet4Prefix": {
      "type": "string",
      "defaultValue": "10.10.21.0/24",
      "metadata": {
        "description": "Subnet 4 Prefix"
      }
    },
    "subnet5Prefix": {
      "type": "string",
      "defaultValue": "10.10.22.0/24",
      "metadata": {
        "description": "Subnet 5 Prefix"
      }
    },
    "subnet6Prefix": {
      "type": "string",
      "defaultValue": "10.10.23.0/24",
      "metadata": {
        "description": "Subnet 6 Prefix"
      }
    },
    "vnet2AddressPrefix": {
        "type": "string",
        "defaultValue": "10.20.0.0/16",
        "metadata": {
            "description": "Address prefix"
        }
    },
    "subnet1vnet2Prefix": {
        "type": "string",
        "defaultValue": "10.20.21.0/24",
        "metadata": {
            "description": "Subnet 1 Prefix"
        }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "vnetName": "[concat(parameters('namePrefix'), '-vnet')]",
    "subnet1Name": "[concat(parameters('namePrefix'), '-pub-', 'subnet1')]",
    "subnet2Name": "[concat(parameters('namePrefix'), '-pub-', 'subnet2')]",
    "subnet3Name": "[concat(parameters('namePrefix'), '-pub-', 'subnet3')]",
    "subnet4Name": "[concat(parameters('namePrefix'), '-prv-', 'subnet4')]",
    "subnet5Name": "[concat(parameters('namePrefix'), '-prv-', 'subnet5')]",
    "subnet6Name": "[concat(parameters('namePrefix'), '-prv-', 'subnet6')]",
    "publicNSGName": "[concat(parameters('namePrefix'), '-nsg-', 'pub')]",
    "privateNSGName": "[concat(parameters('namePrefix'), '-nsg-', 'prv')]",
    "allowAllNSGName": "[concat(parameters('namePrefix'), '-nsg-', 'allow-all')]",
    "publicRouteTableName": "[concat(parameters('namePrefix'), '-routetbl-pub')]",
    "privateRouteTableName": "[concat(parameters('namePrefix'), '-routetbl-prv')]",
    "server4NICName": "[concat(parameters('namePrefix'), '-nic-server4')]",
    "server4VMName": "[concat(parameters('namePrefix'), '-vm-server4')]",    
    "bastionNICName": "[concat(parameters('namePrefix'), '-nic-bastion')]",
    "bastionVMName": "[concat(parameters('namePrefix'), '-vm-bastion')]",
    "bastionpublicIpAddressName": "[concat(parameters('namePrefix'), '-pubip-bastion')]",
    "natpublicIpAddressName": "[concat(parameters('namePrefix'), '-pubip-nat')]",
    "natgatewayName": "[concat(parameters('namePrefix'), '-nat')]",
    "vnet2Name": "[concat(parameters('namePrefix'), '-vnet2')]",
    "subnet1Vnet2Name": "[concat(parameters('namePrefix'), '-prv-vnet2-', 'subnet1')]",
    "natpublicIpAddressVnet2Name": "[concat(parameters('namePrefix'), '-pubip-vnet2-nat')]",
    "natgatewayVnet2Name": "[concat(parameters('namePrefix'), '-vnet2-nat')]",
    "privateVnet2NSGName": "[concat(parameters('namePrefix'), '-nsg-vnet2-', 'prv')]",
    "privateVnet2RouteTableName": "[concat(parameters('namePrefix'), '-routetbl-vnet2-prv')]",
    "vNettoVnet2PeeringName": "[concat(variables('vnetName'), '-to-', variables('vnet2Name'))]",
    "vnet2tovNetPeeringName": "[concat(variables('vnet2Name'), '-to-', variables('vnetName'))]", 
    "commonManagedIdentityName": "[concat(parameters('namePrefix'), '-mi-common')]",
    "logAnalyticsWorkspaceName": "[concat(parameters('namePrefix'), '-loganalytics-common')]",
    "vmSize": "Standard_B2s",
    "vmOsDiskType": "Premium_LRS",
    "peeredNetworkvmSize": "Standard_D16s_v3",
    "peeredvmOsDiskType": "Premium_LRS",
    "adminUsername": "azureuser",
    "adminPassword": "[parameters('vmAdminPassword')]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('publicNSGName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('privateNSGName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('allowAllNSGName'))]",
        "[resourceId('Microsoft.Network/routeTables', variables('publicRouteTableName'))]",
        "[resourceId('Microsoft.Network/routeTables', variables('privateRouteTableName'))]",
        "[resourceId('Microsoft.Network/natGateways', variables('natgatewayName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]",
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('publicRouteTableName'))]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('publicNSGName'))]"
              }
            }
          },
          {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]",
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('publicRouteTableName'))]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('publicNSGName'))]"
              }
            }
          },
          {
            "name": "[variables('subnet3Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]",
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('publicRouteTableName'))]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('publicNSGName'))]"
              }
            }
          },
          {
            "name": "[variables('subnet4Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet4Prefix')]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                },
                {
                  "service": "Microsoft.Sql"
                }
              ],
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('privateRouteTableName'))]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('privateNSGName'))]"
              },
              "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways', variables('natgatewayname'))]"
              }
            }
          },
          {
            "name": "[variables('subnet5Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet5Prefix')]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                },
                {
                  "service": "Microsoft.Sql"
                }
              ],
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('privateRouteTableName'))]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('privateNSGName'))]"
              },
              "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways', variables('natgatewayname'))]"
              }
            }
          },
          {
            "name": "[variables('subnet6Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet6Prefix')]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                },
                {
                  "service": "Microsoft.Sql"
                }
              ],
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('privateRouteTableName'))]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('privateNSGName'))]"
              },
              "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways', variables('natgatewayname'))]"
              }
            }
          }
        ]
      },
      "resources": [
          {
              "apiVersion": "2020-05-01",
              "type": "virtualNetworkPeerings",
              "condition": "[parameters('setupPeeredNetwork')]",
              "name": "[variables('vNettoVnet2PeeringName')]",
              "location": "[parameters('location')]",
              "dependsOn": [
                  "[resourceId('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                  "[resourceId('Microsoft.Network/virtualNetworks/', variables('vnet2Name'))]"
              ],
              "comments": "This is the peering from vNet 1 to vNet 2",
              "properties": {
                  "allowVirtualNetworkAccess": true,
                  "allowForwardedTraffic": false,
                  "allowGatewayTransit": false,
                  "useRemoteGateways": false,
                  "remoteVirtualNetwork": {
                      "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet2Name'))]"
                  }
              }
          }
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[variables('commonManagedIdentityName')]",
      "apiVersion": "2018-11-30",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]"
    },
    {
        "type": "Microsoft.OperationalInsights/workspaces",
        "apiVersion": "2020-10-01",
        "name": "[variables('logAnalyticsWorkspaceName')]",
        "location": "[parameters('location')]",
        "tags": "[parameters('resourceTags')]",
        "properties": {
            "sku": {
                "name": "pergb2018"
            }
        },
        "resources":[
          {
            "type": "dataSources",
            "apiVersion": "2020-08-01",
            "name": "LINUX_LOGS",
            "dependsOn": [
                "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
            ],
            "kind": "CustomLog",
            "properties": {
                "customLogName": "bastion_ACCESS_LOG",
                "description": "Queries access.log for squid proxy",
                "inputs": [
                  {
                      "location": {
                        "fileSystemLocations": {
                            "linuxFileTypeLogPaths": [ "/var/log/squid/access.log" ]
                        }
                      },
                      "recordDelimiter": {
                        "regexDelimiter": {
                          "matchIndex": 0,
                          "numberdGroup": null,
                          "pattern": "\\n"
                        }
                      }
                  }
                ],
                "extractions": [
                {
                    "extractionName": "TimeGenerated",
                    "extractionProperties": {
                    "dateTimeExtraction": {
                        "regex": [
                          {
                              "matchIndex": 0,
                              "numberdGroup": null,
                              "pattern": "((\\d{2})|(\\d{4}))-([0-1]\\d)-(([0-3]\\d)|(\\d))\\s((\\d)|([0-1]\\d)|(2[0-4])):[0-5][0-9]:[0-5][0-9]"
                          }
                        ]
                    }
                    },
                    "extractionType": "DateTime"
                }
                ]
            }
          }
        ]
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('publicRouteTableName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "routes": [
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('privateRouteTableName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "routes": [
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('privateNSGName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "securityRules": [
              {
                "name": "allow-all-from-all-vnet",
                "properties": {
                  "priority": 1000,
                  "access": "Allow",
                  "direction": "Inbound",
                  "destinationPortRange": "*",
                  "protocol": "*",
                  "sourceAddressPrefix": "10.10.0.0/16",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "name": "allow-all-from-azure-loadbalancer",
                "properties": {
                  "priority": 3500,
                  "access": "Allow",
                  "direction": "Inbound",
                  "destinationPortRange": "*",
                  "protocol": "*",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "name": "deny-all-from-vnet2",
                "properties": {
                  "priority": 4000,
                  "access": "Deny",
                  "direction": "Inbound",
                  "destinationPortRange": "*",
                  "protocol": "*",
                  "sourceAddressPrefix": "10.20.0.0/16",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('publicNSGName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-all-inbound-for-ip",
            "properties": {
              "priority": 1000,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "*",
              "protocol": "*",
              "sourceAddressPrefix": "[parameters('AllowIPAddress')]",
              "sourcePortRange": "0-65535",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('allowAllNSGName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-all",
            "properties": {
              "priority": 1000,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "*",
              "protocol": "*",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "1024-65535",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "allow-all-inbound-vnet",
            "properties": {
              "priority": 1001,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "*",
              "protocol": "*",
              "sourceAddressPrefix": "[parameters('vnetAddressPrefix')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "condition": "[parameters('deployVMinPrivateSubnet')]",
      "apiVersion": "2018-10-01",
      "name": "[variables('server4NICName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
          "ipConfigurations": [
              {
                  "name": "server4-ipconfig-1",
                  "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet4Name'))]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                  }
              }
          ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "condition": "[parameters('deployVMinPrivateSubnet')]",
      "apiVersion": "2020-12-01",
      "name": "[variables('server4VMName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('server4NICName'))]"
      ],
      "properties": {
          "hardwareProfile": {
              "vmSize": "[variables('vmSize')]"
          },
          "storageProfile": {
              "osDisk": {
                  "createOption": "FromImage",
                  "managedDisk": {
                      "storageAccountType": "[variables('vmOsDiskType')]"
                  }
              },
              "imageReference": "[parameters('vmImageReference')]"
          },
          "networkProfile": {
              "networkInterfaces": [
                  {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('server4NICName'))]"
                  }
              ]
          },
          "osProfile": {
              "computerName": "server4",
              "adminUsername": "[variables('adminUsername')]",
              "adminPassword": "[variables('adminPassword')]",
              "linuxConfiguration": {
                  "patchSettings": {
                      "patchMode": "ImageDefault"
                  }
              }
          }
      }
    },
    {
      "type": "Microsoft.Network/publicIpAddresses",
      "condition": "[parameters('deployBastionVM')]",
      "name": "[variables('bastionpublicIpAddressName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "sku": {
          "name": "Standard"
      },
      "properties": {
          "publicIpAllocationMethod": "Static"
      }
    },
    {
        "type": "Microsoft.Network/publicIpAddresses",
        "name": "[variables('natpublicIpAddressName')]",
        "location": "[parameters('location')]",
        "tags": "[parameters('resourceTags')]",
        "sku": {
            "name": "Standard"
        },
        "properties": {
            "publicIpAllocationMethod": "Static"
        }
      },
    {
      "type": "Microsoft.Network/natGateways",
      "apiVersion": "2020-06-01",
      "name": "[variables('natgatewayname')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('natpublicIpAddressName'))]"
      ],
      "properties": {
        "idleTimeoutInMinutes": 4,
        "publicIpAddresses": [
          {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('natpublicIpAddressName'))]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "condition": "[parameters('deployBastionVM')]",
      "apiVersion": "2018-10-01",
      "name": "[variables('bastionNICName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('bastionpublicIpAddressName')]"
      ],
      "properties": {
          "ipConfigurations": [
              {
                  "name": "bastion-ipconfig-1",
                  "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
                      },
                      "privateIPAddress": "10.10.11.4",
                      "privateIPAllocationMethod": "Static",
                      "publicIpAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastionpublicIpAddressName'))]"
                    }
                  }
              }
          ],
          "enableIPForwarding": true
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "condition": "[parameters('deployBastionVM')]",
      "apiVersion": "2020-12-01",
      "name": "[variables('bastionVMName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "identity": {
          "type": "userAssigned",
          "userAssignedIdentities": {
              "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',variables('commonManagedIdentityName'))]": {}
          }
      },
      "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('bastionNICName'))]",
           "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('commonManagedIdentityName'))]",
           "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
      ],
      "properties": {
          "hardwareProfile": {
              "vmSize": "[variables('vmSize')]"
          },
          "storageProfile": {
              "osDisk": {
                  "createOption": "FromImage",
                  "managedDisk": {
                      "storageAccountType": "[variables('vmOsDiskType')]"
                  }
              },
              "imageReference": "[parameters('vmImageReference')]"
          },
          "networkProfile": {
              "networkInterfaces": [
                  {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('bastionNICName'))]"
                  }
              ]
          },
          "osProfile": {
              "computerName": "bastion",
              "adminUsername": "[variables('adminUsername')]",
              "adminPassword": "[variables('adminPassword')]",
              "linuxConfiguration": {
                  "patchSettings": {
                      "patchMode": "ImageDefault"
                  }
              }
          }
      },
      "resources":[
        {
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "condition": "[parameters('deployBastionVM')]",
          "apiVersion": "2015-06-15",
          "name": "[concat(variables('bastionVMName'),'/CustomScript')]",
          "location": "[parameters('location')]",
          "tags": "[parameters('resourceTags')]",
          "dependsOn": [
              "[concat('Microsoft.Compute/virtualMachines/', variables('bastionVMName'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
                "fileUris": [],
              "commandToExecute": "echo `date`"
            },
            "protectedSettings": {
            }
          }
        },
        {
            "type": "extensions",
            "condition": "[parameters('deployBastionVM')]",
            "apiVersion": "2018-10-01",
            "name": "DependencyAgentLinux",
            "location": "[parameters('location')]",
            "tags": "[parameters('resourceTags')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('bastionVMName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentLinux",
                "typeHandlerVersion": "9.10",
                "autoUpgradeMinorVersion": true,
                "settings": {}
            }
        }
      ]
    },
    {
        "type": "Microsoft.Network/publicIpAddresses",
        "condition": "[parameters('setupPeeredNetwork')]",
        "apiVersion": "2020-06-01",
        "name": "[variables('natpublicIpAddressVnet2Name')]",
        "location": "[parameters('location')]",
        "tags": "[parameters('resourceTags')]",
        "sku": {
                "name": "Standard"
            },
        "properties": {
                "publicIpAllocationMethod": "Static"
            }
    },
    {
        "type": "Microsoft.Network/natGateways",
        "condition": "[parameters('setupPeeredNetwork')]",
        "apiVersion": "2020-06-01",
        "name": "[variables('natgatewayVnet2Name')]",
        "location": "[parameters('location')]",
        "sku": {
            "name": "Standard"
        },
        "dependsOn": [
            "[resourceId('Microsoft.Network/publicIPAddresses', variables('natpublicIpAddressVnet2Name'))]"
        ],
        "properties": {
            "idleTimeoutInMinutes": 4,
            "publicIpAddresses": [
                    {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('natpublicIpAddressVnet2Name'))]"
                    }
                ]
            }
        },
    {
        "type": "Microsoft.Network/networkSecurityGroups",
        "condition": "[parameters('setupPeeredNetwork')]",
        "apiVersion": "2019-08-01",
        "name": "[variables('privateVnet2NSGName')]",
        "location": "[parameters('location')]",
        "tags": "[parameters('resourceTags')]",
        "properties": {
            "securityRules": [
              {
                "name": "allow-all-from-all-vnet2",
                "properties": {
                  "priority": 1000,
                  "access": "Allow",
                  "direction": "Inbound",
                  "destinationPortRange": "*",
                  "protocol": "*",
                  "sourceAddressPrefix": "10.20.0.0/16",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "name": "allow-all-from-bastion",
                "properties": {
                  "priority": 3000,
                  "access": "Allow",
                  "direction": "Inbound",
                  "destinationPortRange": "*",
                  "protocol": "*",
                  "sourceAddressPrefix": "10.10.11.4",
                  "sourcePortRange": "0-65535",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "name": "allow-all-from-azure-loadbalancer",
                "properties": {
                  "priority": 3500,
                  "access": "Allow",
                  "direction": "Inbound",
                  "destinationPortRange": "*",
                  "protocol": "*",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "name": "deny-all-from-vnet1",
                "properties": {
                  "priority": 4000,
                  "access": "Deny",
                  "direction": "Inbound",
                  "destinationPortRange": "*",
                  "protocol": "*",
                  "sourceAddressPrefix": "10.10.0.0/16",
                  "sourcePortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              }
            ]
        }
    },
    {
        "type": "Microsoft.Network/routeTables",
        "condition": "[parameters('setupPeeredNetwork')]",
        "apiVersion": "2019-08-01",
        "name": "[variables('privateVnet2RouteTableName')]",
        "location": "[parameters('location')]",
        "tags": "[parameters('resourceTags')]",
        "properties": {
            "routes": [
            ]
        }
    },
    {
        "apiVersion": "2020-05-01",
        "type": "Microsoft.Network/virtualNetworks",
        "condition": "[parameters('setupPeeredNetwork')]",
        "name": "[variables('vnet2Name')]",
        "location": "[parameters('location')]",
        "tags": "[parameters('resourceTags')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/networkSecurityGroups', variables('privateVnet2NSGName'))]",
            "[resourceId('Microsoft.Network/routeTables', variables('privateVnet2RouteTableName'))]",
            "[resourceId('Microsoft.Network/natGateways', variables('natgatewayVnet2Name'))]"
        ],
        "comments": "This is the second vNet",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "[parameters('vnet2AddressPrefix')]"
                ]
            },
            "subnets": [
                {
                    "name": "[variables('subnet1Vnet2Name')]",
                    "properties": {
                        "addressPrefix": "[parameters('subnet1vnet2Prefix')]",
                        "routeTable": {
                            "id": "[resourceId('Microsoft.Network/routeTables', variables('privateVnet2RouteTableName'))]"
                        },
                        "networkSecurityGroup": {
                            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('privateVnet2NSGName'))]"
                        },
                        "natGateway": {
                            "id": "[resourceId('Microsoft.Network/natGateways', variables('natgatewayVnet2Name'))]"
                        }
                    }
                }
            ]
        },
        "resources": [
            {
                "apiVersion": "2020-05-01",
                "type": "virtualNetworkPeerings",
                "condition": "[parameters('setupPeeredNetwork')]",
                "name": "[variables('vnet2tovNetPeeringName')]",
                "location": "[parameters('location')]",
                "dependsOn": [
                    "[resourceId('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                    "[resourceId('Microsoft.Network/virtualNetworks/', variables('vnet2Name'))]"
                ],
                "comments": "This is the peering from vNet 2 to vNet 1",
                "properties": {
                    "allowVirtualNetworkAccess": true,
                    "allowForwardedTraffic": false,
                    "allowGatewayTransit": false,
                    "useRemoteGateways": false,
                    "remoteVirtualNetwork": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]"
                    }
                }
            }
        ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "condition": "[ and( parameters('setupPeeredNetworkVMs'), parameters('setupPeeredNetwork'))]",
      "apiVersion": "2018-10-01",
      "name": "[concat('host',copyIndex(1),'-nic')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
        "[variables('vnet2Name')]"
      ],
      "properties": {
          "ipConfigurations": [
              {
                  "name": "[concat('host',copyIndex(1),'-ipconfig')]",
                  "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet2Name'), variables('subnet1Vnet2Name'))]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                  }
              }
          ]
      },
      "copy": {
        "name": "niccopy",
        "count": "[parameters('vmCountinPeeredNetwork')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "condition": "[ and( parameters('setupPeeredNetworkVMs'), parameters('setupPeeredNetwork'))]",
      "apiVersion": "2020-12-01",
      "name": "[concat('host',copyIndex(1))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', 'host',copyIndex(1),'-nic')]"
      ],
      "properties": {
          "hardwareProfile": {
              "vmSize": "[variables('peeredNetworkvmSize')]"
          },
          "storageProfile": {
              "osDisk": {
                  "createOption": "FromImage",
                  "managedDisk": {
                      "storageAccountType": "[variables('peeredvmOsDiskType')]"
                  }
              },
              "imageReference": "[parameters('vmImageReference')]"
          },
          "networkProfile": {
              "networkInterfaces": [
                  {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('host',copyIndex(1),'-nic'))]"
                  }
              ]
          },
          "osProfile": {
              "computerName": "[concat('host',copyIndex(1))]",
              "adminUsername": "[variables('adminUsername')]",
              "adminPassword": "[variables('adminPassword')]",
              "linuxConfiguration": {
                  "patchSettings": {
                      "patchMode": "ImageDefault"
                  }
              }
          }
      },
      "copy": {
        "name": "hostcopy",
        "count": "[parameters('vmCountinPeeredNetwork')]"
      }
    }
  ]
}
